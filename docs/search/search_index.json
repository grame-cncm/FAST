{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"FAST: Fast Audio Signal-processing Technologies on FPGA FAST (ANR-20-CE38-0001) was (2021-2025) a research project funded by the Agence Nationale de la Recherche (ANR -- the French National Research Agency). It gathered the strength of GRAME-CNCM , CITI Lab (INSA Lyon) , and LMFA (\u00c9cole Centrale Lyon) towards two goals: facilitating the design of ultra-low latency embedded systems for real-time audio signal processing, using such systems in the context of active control of acoustics. Faust Programming Language -> Audio on FPGA -> Active control of acoustics Timeline FAST begun in March 2021 and ended in January 2025. Partners FAST involved 6 permanent faculty, 2 PhD students, 1 postdoc, and 3 interns, spread out over 3 main institutions: GRAME-CNCM, CITI Lab @ INSA Lyon, and LMFA @ \u00c9cole Centrale Lyon. GRAME-CNCM GRAME is a \"Centre National de Cr\u00e9ation Musicale\" (National Centre for Musical Creation) funded by the French ministry of culture, the Auvergne-Rh\u00f4ne-Alpes region and the city of Lyon. It is organized in three departments: production/music creation, transmission, and research. GRAME's research department hosts four permanent researchers as well as PhD students, postdocs, engineers, interns, etc. Its activities focus on music technology and computer music. GRAME is the birthplace of the Faust programming language which is used at the heart of FAST. CITI Lab @ INSA Lyon CITI is an academic laboratory associated with INSA Lyon and INRIA . The CITI Laboratory develops research activities bringing together computer science, networking, and digital communications to address the challenging issues related to the development of Internet. One of CITI's research focus is on FPGAs which are heavily used as part of FAST. LMFA @ \u00c9cole Centrale Lyon The LMFA is the Laboratoire de M\u00e9canique des Fluides et d'Acoustique (Fluid Mechanics and Acoustics Laboratory). It hosts researchers from \u00c9cole Centrale Lyon , INSA Lyon , Universit\u00e9 Claude Bernard Lyon 1 and CNRS . The members of LMFA associated to the FAST project specialize in acoustics active control which is one of the focus of FAST.","title":"FAST: Fast Audio Signal-processing Technologies on FPGA"},{"location":"#fast-fast-audio-signal-processing-technologies-on-fpga","text":"FAST (ANR-20-CE38-0001) was (2021-2025) a research project funded by the Agence Nationale de la Recherche (ANR -- the French National Research Agency). It gathered the strength of GRAME-CNCM , CITI Lab (INSA Lyon) , and LMFA (\u00c9cole Centrale Lyon) towards two goals: facilitating the design of ultra-low latency embedded systems for real-time audio signal processing, using such systems in the context of active control of acoustics. Faust Programming Language -> Audio on FPGA -> Active control of acoustics","title":"FAST: Fast Audio Signal-processing Technologies on FPGA"},{"location":"#timeline","text":"FAST begun in March 2021 and ended in January 2025.","title":"Timeline"},{"location":"#partners","text":"FAST involved 6 permanent faculty, 2 PhD students, 1 postdoc, and 3 interns, spread out over 3 main institutions: GRAME-CNCM, CITI Lab @ INSA Lyon, and LMFA @ \u00c9cole Centrale Lyon.","title":"Partners"},{"location":"#grame-cncm","text":"GRAME is a \"Centre National de Cr\u00e9ation Musicale\" (National Centre for Musical Creation) funded by the French ministry of culture, the Auvergne-Rh\u00f4ne-Alpes region and the city of Lyon. It is organized in three departments: production/music creation, transmission, and research. GRAME's research department hosts four permanent researchers as well as PhD students, postdocs, engineers, interns, etc. Its activities focus on music technology and computer music. GRAME is the birthplace of the Faust programming language which is used at the heart of FAST.","title":"GRAME-CNCM"},{"location":"#citi-lab-insa-lyon","text":"CITI is an academic laboratory associated with INSA Lyon and INRIA . The CITI Laboratory develops research activities bringing together computer science, networking, and digital communications to address the challenging issues related to the development of Internet. One of CITI's research focus is on FPGAs which are heavily used as part of FAST.","title":"CITI Lab @ INSA Lyon"},{"location":"#lmfa-ecole-centrale-lyon","text":"The LMFA is the Laboratoire de M\u00e9canique des Fluides et d'Acoustique (Fluid Mechanics and Acoustics Laboratory). It hosts researchers from \u00c9cole Centrale Lyon , INSA Lyon , Universit\u00e9 Claude Bernard Lyon 1 and CNRS . The members of LMFA associated to the FAST project specialize in acoustics active control which is one of the focus of FAST.","title":"LMFA @ \u00c9cole Centrale Lyon"},{"location":"contacts/","text":"Contacts For any further information about FAST, feel free to contact the project coordinator at: michon_AT_grame_DOT_fr.","title":"Contacts"},{"location":"contacts/#contacts","text":"For any further information about FAST, feel free to contact the project coordinator at: michon_AT_grame_DOT_fr.","title":"Contacts"},{"location":"overview/","text":"Overview of FAST This section provides a general overiew of the FAST project. The main outcomes and results of FAST are presented in a dedicated page . Challenges and State of the Art Despite the wide variety of available platforms, programmable systems for real-time digital audio signal processing are often limited by latency, computational power, and their ability to handle a large number of audio channels in parallel. Some application areas require exceptional performance in these aspects. Room acoustic active control, for instance, involves using a large number of speakers and microphones, executing complex algorithms in parallel, and achieving very low latencies on the order of tens of microseconds. Field-Programmable Gate Arrays (FPGAs) are the only programmable platforms capable of delivering the performance required for such applications. However, programming them is extremely complex and requires specific skills that most audio signal processing engineers do not possess. High-Level Synthesis (HLS) offers a general solution to this problem by enabling FPGAs to be programmed using high-level languages such as C, C++, Python, etc. Still, for specific applications, HLS remains highly complex and therefore largely inaccessible. Several projects have sought to make HLS more accessible in various fields such as image and video processing, control systems, and more. Audio, however, had never benefited from such efforts\u2014until the FAST project. More broadly, it has been shown that Domain-Specific Languages (DSLs) can provide an effective way to make programming certain embedded platforms more accessible. Faust is a domain-specific programming language developed by one of the FAST partners. It aims to make the development of audio signal processing applications more accessible. Faust is used by a wide community of artists, hobbyists, and non-specialist engineers worldwide. More specifically, Faust supports programming a variety of embedded platforms such as microcontrollers, Digital Signal Processors (DSPs), and others. Until the FAST project, however, Faust could not be used to program FPGAs. FPGAs operate very differently from other types of processors by providing access to \"programmable logic.\" Efficient programming of FPGAs requires considering numerous factors such as parallelization, pipelining, use of fixed-point arithmetic, and more. As a result, creating a compilation toolchain from Faust to FPGAs is a complex task that had not been explored prior to FAST. Additionally, the use of programmable FPGA platforms for room acoustic active control had also seen very limited exploration before this project. Objectives The main objectives of the FAST project were: To make FPGA programming more accessible for real-time audio signal processing through the Faust programming language; To develop an accessible and programmable platform for ultra-low-latency multichannel audio signal processing; To explore the use of this platform for room acoustic active control applications. Two approaches were considered for building a compilation toolchain from Faust to FPGAs. The first involved adding an \"VHDL backend\" to Faust, allowing the generation of VHDL code directly from a Faust program. The second was based on using High-Level Synthesis (HLS), which required developing a dedicated Faust backend that generates optimized C++ code suitable for HLS. In both approaches, the goal was to delegate to Faust the responsibility of distributing computations between the CPU and the FPGA available on the prototyping boards used (e.g., Digilent Zybo Z7 and Genesys), as well as managing memory usage (DDR). More broadly, it was essential to produce highly optimized code. To achieve this, several scientific and technical challenges had to be addressed, such as automating parallelization, pipelining, and fixed-point code generation \u2014 which is typically more efficient than floating-point code on FPGAs. At the start of the project, we believed that fixed-point optimization would be the most critical factor for performance. However, it turned out that effective pipelining and parallelization had an even greater impact. Before FAST, no open, programmable, FPGA-based hardware platform existed that could handle a large number of audio channels in parallel with sufficiently low latency for active room acoustic control applications. One of FAST's objectives was therefore to develop FPGA-based hardware boards that met these specifications. In parallel, the project also aimed to create a complete software suite to manage the entire system: real-time application control, compilation options, visualization of compilation results, and more. Another objective of FAST was to use the hardware platforms developed during the project for applications involving active noise control and sound field control over extended spatial areas. This included implementing classic active control algorithms \u2014 such as feedback and feedforward (Fx-LMS) \u2014 in the Faust language and compiling them to run on the Zybo and Genesys platforms used at the core of the project. Methods and Approaches FAST was organized into six work packages: Fixed-point computation in Faust FPGA backends for Faust Hardware platforms for audio processing Audio signal processing module Artificial reverberation Spatial active noise control In Work Package 1, the goal was to enable Faust to generate fixed-point DSP code. This required investigating the feasibility of implementing an automatic signal format inference system within the Faust compiler. This work was carried out by Agathe Herrou during an 18-month postdoctoral position at GRAME. It laid the groundwork for such a mechanism, though it did not result in a fully functional system. As of now, the Faust compiler is still not capable of producing fixed-point code in a generalized way. Work Package 2 focused on providing a functional compilation toolchain from Faust to FPGAs by AMD/Xilinx. As previously mentioned, two approaches were considered: one based on High-Level Synthesis (HLS), and another in which the Faust compiler directly generates VHDL code. The first approach allowed us to establish a complete compilation chain from Faust to FPGAs. This work was carried out by Maxime Popoff (PhD student at INSA). A prototype of a \"Faust to VHDL\" compiler was also developed as part of the second approach, but it currently has several limitations and is not yet usable for practical applications. This work was carried out by several successive interns at INSA. In parallel with this, significant effort was devoted to developing HLS optimization techniques tailored to real-time audio signal processing applications. This work has been thoroughly documented and can lead to performance gains of up to tenfold in certain cases. Prior to the start of the FAST project, we had not fully appreciated the importance of this task. Work Package 3 aimed to develop a series of external boards to adapt generic FPGA evaluation modules (Digilent Zybo Z7-10/20 and Genesys) for ultra-low-latency multichannel audio applications. This work was also carried out by Maxime Popoff. Overall, the objectives of this work package were fully achieved \u2014and even exceeded. Work Package 4 aimed to use the systems developed in the previous work packages for practical musical applications (e.g., synthesis or sound processing modules, etc.). To do this, it was necessary to implement tools for controlling the parameters of DSP programs running on the FPGAs. Hardware controllers were developed in this context, along with a software infrastructure that enables the use of standard control methods such as USB MIDI, Open Sound Control (OSC), web interfaces, etc., made possible through the use of an embedded Linux system. This work was carried out by Maxime Popoff and Pierre Cochard (engineer in the Emeraude team at INSA). Overall, the objectives of this work package were fully achieved \u2014 and even exceeded. In Work Package 5, the objective was to deploy artificial reverberation algorithms based on impulse response convolution on the FPGA platform developed in the previous work packages. Several approaches were explored for this purpose. First, a modal approach, in which each resonance mode of a room is implemented using a second-order IIR filter (biquad). This type of algorithm is highly parallelizable and thus well suited for FPGAs. Second, a partitioned convolution approach, where the convolution operations can be \"split\" and therefore potentially pipelined and parallelized. Since the modal approach proved too destructive, we ultimately favored the partitioned convolution method, which is also more standard. The deployment of this type of inherently complex algorithm was greatly facilitated by Syfala. By the end of WP5, we were able to process a \"dry\" multichannel sound on an FPGA to produce virtual acoustic renderings. This work was primarily carried out by R\u00e9mi Jeunehomme during an internship at GRAME. Although it has not yet led to concerts as initially planned in the FAST project proposal, GRAME is currently exploring the potential use of this technology in an upcoming artistic production. In Work Package 6, spatial active noise control applications were explored. The initial goals aimed to enable real-time control of a sound zone (possibly mobile) in space. Classical multi-point active control algorithms (MP-FxLMS) as well as algorithms using sound field decomposition into spherical harmonics (SH-FxLMS) were to be evaluated. These goals were partially achieved using the technologies developed in FAST. A fixed zone was successfully controlled in real-time. However, the frequency range and size of the zone were limited by the computational power available at the time. This work was carried out by Lo\u00efc Alexandre as part of his doctoral thesis, under the supervision of Pierre Lecomte, Marie-Annick Galland, and Alain Berry. Impact and Outcomes Syfala is now being used outside the FAST project. Stanford University (USA) has set up a replica of the WFS system mentioned in the previous result. Maynooth University (Ireland) is using Syfala to prototype audio systems operating at high sampling rates. A Swiss company, Sonotrex, is using Syfala to implement active acoustic control systems. The Swedish public radio is using Syfala to prototype new low-latency mixing consoles. GRAME is expected to use the FAST technologies in several upcoming artistic projects. Additionally, a \"Syfala\" workshop, bringing together about fifteen participants, was held in December 2023 at INSA Lyon. The work conducted in FAST led to the creation of a startup \"Polyphonic\" by Maxime Popoff (former FAST PhD student) focused on the technologies developed within the project. This startup is currently being funded by the Inria Startup Studio. More broadly, FAST has contributed to the democratization of FPGA usage in the field of real-time audio signal processing. Scientific and Technical Challenges Despite the significant work carried out in the FAST project, several scientific and technical challenges remain. The first challenge is related to the management of fixed-point calculations in the Faust compiler, which did not progress enough during FAST to result in an operational system that can be generalized to all Faust programs. The production of fixed-point DSP code would improve efficiency, thus paving the way for more complex applications. The optimization methods based on HLS discovered during FAST have not yet been incorporated into the Faust compiler, which makes the \"Faust mode\" of Syfala much less efficient than the C/C++ mode. The general architecture of the Faust compiler is not necessarily well-suited for generating efficient code for HLS, which prevents the porting of optimization techniques developed in FAST. Significant work will continue in this direction after FAST. The Faust-to-VHDL compiler prototype developed during FAST remains limited and is not generalizable to all Faust programs. Additionally, its mode of operation is still quite primitive and does not yet support pipelining or automatic parallelization, nor the management of external memory (DDR). Having an operational Faust-to-VHDL compiler could allow us to bypass proprietary HLS tools, which are essentially \"black boxes\" over which we have limited control. Active control algorithms require multichannel filtering using convolutions, which can be very memory - and computation - intensive when the frequency band to be processed is large and the number of channels increases. This remains a bottleneck, as it has been difficult to process bands wider than just a few Hz with the hardware developed during the FAST project. Work on fast convolution algorithms (via Fourier transforms) is still needed to improve the current performance of the controllers provided by Syfala. Perspectives Overall, the FAST project has opened up a large number of new research and development avenues, which we attempt to summarize in this section. First, we aim to continue the development of Syfala, which aspires to become an essential tool for programming FPGAs for real-time audio signal processing applications. One of the first tasks in this direction is to port the HLS optimization techniques discovered in FAST to the Faust language so that it becomes a leading programming tool for such applications. In the absence of an efficient fixed-point management mode in Faust, an alternative solution could be to use the FloPoCo tool ( https://flopoco.org/ ), which implements optimized operators in C++ for FPGA. During FAST, we realized the potential of using FPGAs in the context of sound field synthesis, sound spatialization, and setting up immersive virtual acoustics experiences. So far, we have only scratched the surface of these types of applications, which seem very promising, especially in the context of virtual reality. This is why we have recently submitted a new ANR project in this direction, combining FPGA usage with distributed computing approaches to set up systems for high-fidelity virtual acoustics. In parallel with this potential future project, and as mentioned in previous sections, Maxime Popoff (former FAST PhD student) has initiated a startup project aimed at developing applications for sound spatialization based on the technologies developed in FAST. We also hope to continue working on more specific aspects, such as implementing Sigma-Delta ADCs or exploring the use of our system for active control of musical instruments. For spatial active noise control aspects, the hardware that can be programmed via Syfala has shown very encouraging results, even comparable to what an expensive commercial controller can achieve. The ease of programming allows for the rapid deployment of a real-time solution. Current limitations in computational power require rethinking the perspectives toward smaller control zones, such as around the user's ears, for example. We will need to rethink the control signal calculation algorithms to make them as computationally efficient as possible.","title":"Overview"},{"location":"overview/#overview-of-fast","text":"This section provides a general overiew of the FAST project. The main outcomes and results of FAST are presented in a dedicated page .","title":"Overview of FAST"},{"location":"overview/#challenges-and-state-of-the-art","text":"Despite the wide variety of available platforms, programmable systems for real-time digital audio signal processing are often limited by latency, computational power, and their ability to handle a large number of audio channels in parallel. Some application areas require exceptional performance in these aspects. Room acoustic active control, for instance, involves using a large number of speakers and microphones, executing complex algorithms in parallel, and achieving very low latencies on the order of tens of microseconds. Field-Programmable Gate Arrays (FPGAs) are the only programmable platforms capable of delivering the performance required for such applications. However, programming them is extremely complex and requires specific skills that most audio signal processing engineers do not possess. High-Level Synthesis (HLS) offers a general solution to this problem by enabling FPGAs to be programmed using high-level languages such as C, C++, Python, etc. Still, for specific applications, HLS remains highly complex and therefore largely inaccessible. Several projects have sought to make HLS more accessible in various fields such as image and video processing, control systems, and more. Audio, however, had never benefited from such efforts\u2014until the FAST project. More broadly, it has been shown that Domain-Specific Languages (DSLs) can provide an effective way to make programming certain embedded platforms more accessible. Faust is a domain-specific programming language developed by one of the FAST partners. It aims to make the development of audio signal processing applications more accessible. Faust is used by a wide community of artists, hobbyists, and non-specialist engineers worldwide. More specifically, Faust supports programming a variety of embedded platforms such as microcontrollers, Digital Signal Processors (DSPs), and others. Until the FAST project, however, Faust could not be used to program FPGAs. FPGAs operate very differently from other types of processors by providing access to \"programmable logic.\" Efficient programming of FPGAs requires considering numerous factors such as parallelization, pipelining, use of fixed-point arithmetic, and more. As a result, creating a compilation toolchain from Faust to FPGAs is a complex task that had not been explored prior to FAST. Additionally, the use of programmable FPGA platforms for room acoustic active control had also seen very limited exploration before this project.","title":"Challenges and State of the Art"},{"location":"overview/#objectives","text":"The main objectives of the FAST project were: To make FPGA programming more accessible for real-time audio signal processing through the Faust programming language; To develop an accessible and programmable platform for ultra-low-latency multichannel audio signal processing; To explore the use of this platform for room acoustic active control applications. Two approaches were considered for building a compilation toolchain from Faust to FPGAs. The first involved adding an \"VHDL backend\" to Faust, allowing the generation of VHDL code directly from a Faust program. The second was based on using High-Level Synthesis (HLS), which required developing a dedicated Faust backend that generates optimized C++ code suitable for HLS. In both approaches, the goal was to delegate to Faust the responsibility of distributing computations between the CPU and the FPGA available on the prototyping boards used (e.g., Digilent Zybo Z7 and Genesys), as well as managing memory usage (DDR). More broadly, it was essential to produce highly optimized code. To achieve this, several scientific and technical challenges had to be addressed, such as automating parallelization, pipelining, and fixed-point code generation \u2014 which is typically more efficient than floating-point code on FPGAs. At the start of the project, we believed that fixed-point optimization would be the most critical factor for performance. However, it turned out that effective pipelining and parallelization had an even greater impact. Before FAST, no open, programmable, FPGA-based hardware platform existed that could handle a large number of audio channels in parallel with sufficiently low latency for active room acoustic control applications. One of FAST's objectives was therefore to develop FPGA-based hardware boards that met these specifications. In parallel, the project also aimed to create a complete software suite to manage the entire system: real-time application control, compilation options, visualization of compilation results, and more. Another objective of FAST was to use the hardware platforms developed during the project for applications involving active noise control and sound field control over extended spatial areas. This included implementing classic active control algorithms \u2014 such as feedback and feedforward (Fx-LMS) \u2014 in the Faust language and compiling them to run on the Zybo and Genesys platforms used at the core of the project.","title":"Objectives"},{"location":"overview/#methods-and-approaches","text":"FAST was organized into six work packages: Fixed-point computation in Faust FPGA backends for Faust Hardware platforms for audio processing Audio signal processing module Artificial reverberation Spatial active noise control In Work Package 1, the goal was to enable Faust to generate fixed-point DSP code. This required investigating the feasibility of implementing an automatic signal format inference system within the Faust compiler. This work was carried out by Agathe Herrou during an 18-month postdoctoral position at GRAME. It laid the groundwork for such a mechanism, though it did not result in a fully functional system. As of now, the Faust compiler is still not capable of producing fixed-point code in a generalized way. Work Package 2 focused on providing a functional compilation toolchain from Faust to FPGAs by AMD/Xilinx. As previously mentioned, two approaches were considered: one based on High-Level Synthesis (HLS), and another in which the Faust compiler directly generates VHDL code. The first approach allowed us to establish a complete compilation chain from Faust to FPGAs. This work was carried out by Maxime Popoff (PhD student at INSA). A prototype of a \"Faust to VHDL\" compiler was also developed as part of the second approach, but it currently has several limitations and is not yet usable for practical applications. This work was carried out by several successive interns at INSA. In parallel with this, significant effort was devoted to developing HLS optimization techniques tailored to real-time audio signal processing applications. This work has been thoroughly documented and can lead to performance gains of up to tenfold in certain cases. Prior to the start of the FAST project, we had not fully appreciated the importance of this task. Work Package 3 aimed to develop a series of external boards to adapt generic FPGA evaluation modules (Digilent Zybo Z7-10/20 and Genesys) for ultra-low-latency multichannel audio applications. This work was also carried out by Maxime Popoff. Overall, the objectives of this work package were fully achieved \u2014and even exceeded. Work Package 4 aimed to use the systems developed in the previous work packages for practical musical applications (e.g., synthesis or sound processing modules, etc.). To do this, it was necessary to implement tools for controlling the parameters of DSP programs running on the FPGAs. Hardware controllers were developed in this context, along with a software infrastructure that enables the use of standard control methods such as USB MIDI, Open Sound Control (OSC), web interfaces, etc., made possible through the use of an embedded Linux system. This work was carried out by Maxime Popoff and Pierre Cochard (engineer in the Emeraude team at INSA). Overall, the objectives of this work package were fully achieved \u2014 and even exceeded. In Work Package 5, the objective was to deploy artificial reverberation algorithms based on impulse response convolution on the FPGA platform developed in the previous work packages. Several approaches were explored for this purpose. First, a modal approach, in which each resonance mode of a room is implemented using a second-order IIR filter (biquad). This type of algorithm is highly parallelizable and thus well suited for FPGAs. Second, a partitioned convolution approach, where the convolution operations can be \"split\" and therefore potentially pipelined and parallelized. Since the modal approach proved too destructive, we ultimately favored the partitioned convolution method, which is also more standard. The deployment of this type of inherently complex algorithm was greatly facilitated by Syfala. By the end of WP5, we were able to process a \"dry\" multichannel sound on an FPGA to produce virtual acoustic renderings. This work was primarily carried out by R\u00e9mi Jeunehomme during an internship at GRAME. Although it has not yet led to concerts as initially planned in the FAST project proposal, GRAME is currently exploring the potential use of this technology in an upcoming artistic production. In Work Package 6, spatial active noise control applications were explored. The initial goals aimed to enable real-time control of a sound zone (possibly mobile) in space. Classical multi-point active control algorithms (MP-FxLMS) as well as algorithms using sound field decomposition into spherical harmonics (SH-FxLMS) were to be evaluated. These goals were partially achieved using the technologies developed in FAST. A fixed zone was successfully controlled in real-time. However, the frequency range and size of the zone were limited by the computational power available at the time. This work was carried out by Lo\u00efc Alexandre as part of his doctoral thesis, under the supervision of Pierre Lecomte, Marie-Annick Galland, and Alain Berry.","title":"Methods and Approaches"},{"location":"overview/#impact-and-outcomes","text":"Syfala is now being used outside the FAST project. Stanford University (USA) has set up a replica of the WFS system mentioned in the previous result. Maynooth University (Ireland) is using Syfala to prototype audio systems operating at high sampling rates. A Swiss company, Sonotrex, is using Syfala to implement active acoustic control systems. The Swedish public radio is using Syfala to prototype new low-latency mixing consoles. GRAME is expected to use the FAST technologies in several upcoming artistic projects. Additionally, a \"Syfala\" workshop, bringing together about fifteen participants, was held in December 2023 at INSA Lyon. The work conducted in FAST led to the creation of a startup \"Polyphonic\" by Maxime Popoff (former FAST PhD student) focused on the technologies developed within the project. This startup is currently being funded by the Inria Startup Studio. More broadly, FAST has contributed to the democratization of FPGA usage in the field of real-time audio signal processing.","title":"Impact and Outcomes"},{"location":"overview/#scientific-and-technical-challenges","text":"Despite the significant work carried out in the FAST project, several scientific and technical challenges remain. The first challenge is related to the management of fixed-point calculations in the Faust compiler, which did not progress enough during FAST to result in an operational system that can be generalized to all Faust programs. The production of fixed-point DSP code would improve efficiency, thus paving the way for more complex applications. The optimization methods based on HLS discovered during FAST have not yet been incorporated into the Faust compiler, which makes the \"Faust mode\" of Syfala much less efficient than the C/C++ mode. The general architecture of the Faust compiler is not necessarily well-suited for generating efficient code for HLS, which prevents the porting of optimization techniques developed in FAST. Significant work will continue in this direction after FAST. The Faust-to-VHDL compiler prototype developed during FAST remains limited and is not generalizable to all Faust programs. Additionally, its mode of operation is still quite primitive and does not yet support pipelining or automatic parallelization, nor the management of external memory (DDR). Having an operational Faust-to-VHDL compiler could allow us to bypass proprietary HLS tools, which are essentially \"black boxes\" over which we have limited control. Active control algorithms require multichannel filtering using convolutions, which can be very memory - and computation - intensive when the frequency band to be processed is large and the number of channels increases. This remains a bottleneck, as it has been difficult to process bands wider than just a few Hz with the hardware developed during the FAST project. Work on fast convolution algorithms (via Fourier transforms) is still needed to improve the current performance of the controllers provided by Syfala.","title":"Scientific and Technical Challenges"},{"location":"overview/#perspectives","text":"Overall, the FAST project has opened up a large number of new research and development avenues, which we attempt to summarize in this section. First, we aim to continue the development of Syfala, which aspires to become an essential tool for programming FPGAs for real-time audio signal processing applications. One of the first tasks in this direction is to port the HLS optimization techniques discovered in FAST to the Faust language so that it becomes a leading programming tool for such applications. In the absence of an efficient fixed-point management mode in Faust, an alternative solution could be to use the FloPoCo tool ( https://flopoco.org/ ), which implements optimized operators in C++ for FPGA. During FAST, we realized the potential of using FPGAs in the context of sound field synthesis, sound spatialization, and setting up immersive virtual acoustics experiences. So far, we have only scratched the surface of these types of applications, which seem very promising, especially in the context of virtual reality. This is why we have recently submitted a new ANR project in this direction, combining FPGA usage with distributed computing approaches to set up systems for high-fidelity virtual acoustics. In parallel with this potential future project, and as mentioned in previous sections, Maxime Popoff (former FAST PhD student) has initiated a startup project aimed at developing applications for sound spatialization based on the technologies developed in FAST. We also hope to continue working on more specific aspects, such as implementing Sigma-Delta ADCs or exploring the use of our system for active control of musical instruments. For spatial active noise control aspects, the hardware that can be programmed via Syfala has shown very encouraging results, even comparable to what an expensive commercial controller can achieve. The ease of programming allows for the rapid deployment of a real-time solution. Current limitations in computational power require rethinking the perspectives toward smaller control zones, such as around the user's ears, for example. We will need to rethink the control signal calculation algorithms to make them as computationally efficient as possible.","title":"Perspectives"},{"location":"results/","text":"Practical Results A large part of the objectives of the FAST project has been achieved. On this page, we attempt to provide an overview of the results obtained. Syfala One of the major contributions of FAST is the Syfala tool ( https://inria-emeraude.github.io/syfala/ ), which allows for the programming of AMD/Xilinx FPGAs in C/C++ and Faust for real-time audio signal processing applications, based on the high-level synthesis tools provided by AMD/Xilinx. When Faust is used, the distribution of calculations between the FPGA and the system\u2019s CPU is done automatically. Similarly, memory management (e.g., external DDR memory, internal FPGA memory, etc.) is handled by Syfala. In contrast, when C/C++ is used, these tasks are done manually, which is more complex but also allows for more precise control over program optimization. In this context, another significant contribution of FAST is a wide range of optimization techniques specific to real-time audio signal processing, based on HLS. These are thoroughly presented in the Syfala documentation. Unfortunately, we did not have time to port this work to Syfala's \"Faust mode,\" which means that it is currently much less efficient than the manual C/C++ mode. In both cases, programming FPGAs for real-time audio signal processing applications is now much simpler thanks to Syfala. In parallel with this work, a Faust-to-VHDL compiler prototype has been developed. At the moment, it does not offer the same level of performance as the solutions using HLS. In general, a significant amount of pioneering work has been done regarding the management of fixed-point calculations in the Faust compiler. The use of fixed-point arithmetic, both in HLS and VHDL, would increase the performance level of programs produced by Syfala. However, this system is not yet operational. Hardware Control Programs implemented with Syfala can be controlled with a modular hardware interface (see the figure below). This interface can house a wide variety of buttons, rotary or linear potentiometers, etc. The parameters of a Faust or C/C++ program can be easily mapped to physical controllers on this interface, whose use is fully integrated into Syfala. Software Control and Embedded Linux Integration The software part (the one executed on the system's CPU) of a Syfala program can be implemented either as a \"bare metal\" kernel or as a program running on an embedded Linux provided with Syfala. The bare metal solution allows for handling simple use cases. Specifically, the physical interface mentioned in the previous section uses this method. Similarly, when Faust is used, an option allows for generating a graphical interface executable on a PC connected to the FPGA board. Control data is transmitted to the board via its USB serial port and received by the bare metal kernel. The embedded Linux approach offers the possibility of using more advanced control methods or receiving digital audio streams via Ethernet. In terms of control, embedded Linux enables, for example, the use of USB MIDI interfaces (see the Figure below) or the Open Sound Control (OSC) protocol. For receiving and sending audio streams over Ethernet, we implemented our own protocol, which is usable via PipeWire. This feature is very useful in applications related to spatialized sound: Wave Field Synthesis systems, Ambisonics, etc. Custom FPGA Audio Interfaces Several audio sister boards for FPGA offering unique features and seamlessly integrating with Syfala have been developed as part of FAST. The simplest of these (see the image on the left in the Figure below) allows for the creation of accessible and inexpensive systems for sound spatialization based on a Digilent Zybo Z7 FPGA board. It integrates 32 amplified DACs and can thus be directly interfaced with small 3W speakers. This board is \"stackable,\" which allows for increasing the number of supported audio channels (up to 256). Its manufacturing cost is under 200 euros. Another, more complex board (see the image on the right in the figure), designed for active acoustic control applications, was also implemented as part of FAST. It enabled us to achieve the lowest digital audio latency ever presented in the academic world, at 10 microseconds with a sampling rate of 768 kHz. It provides access to 32 line-level audio inputs and outputs. Like the board mentioned above, it is stackable, allowing for the expansion of input and output channels up to 512. This board was designed to be directly interfaced with a Digilent Genesys FPGA board. Spatial Audio Applications The \"low-cost\" audio interface (see previous section) developed as part of FAST enabled the creation of a 32-channel Wave Field Synthesis (WFS) system (see the Figure below) for a cost of less than 1,000 euros (at least five times cheaper than a system using standard techniques). This system is based on the Digilent Zybo Z7-20 board and allows the spatialization of more than 50 sound sources transmitted to the system via ethernet. Their position can be controlled via OSC messages. The same approach was used to create an accessible Ambisonic system with 17 speakers. The Ambisonic decoder is executed directly on the FPGA, and the encoded audio streams are sent to the system via ethernet. High Order Delta-Sigma DAC Significant work on the implementation of a delta-sigma DAC directly on the FPGA was carried out as part of FAST by Jonas H\u00f6pner (intern at INSA). This aims to reduce the amount of additional hardware (e.g., sound card, etc.) used for real-time audio applications and to enable the execution of audio algorithms at high sampling rates (in the range of several mega Hertz). A functional 5th-order delta-sigma DAC prototype has been integrated into Syfala. This provides performance in terms of signal-to-noise ratio equivalent to a commercial audio DAC and only requires the use of a resistor and a capacitor per audio channel. Active Control The work carried out during Lo\u00efc Alexandre's PhD allowed the testing of development platforms using Syfala in active control applications. The first major result is the implementation of a feedback active control algorithm for an active noise-cancelling headset application. The controller uses the Zybo-Z7 platform and very low-latency ADAU1787 converters. This demonstrator is now used in a teaching unit called \"Active Noise Control\" at the \u00c9cole Centrale de Lyon. The second major result is the implementation of two multichannel active control algorithms for noise reduction in an extended area of space: an MP-FxLMS (Multipoint \"Filtered reference Least Mean Square\") and an SH-FxLMS (Spherical Harmonics)-FxLMS. These algorithms run in real-time on the Zybo-Z7 platforms and help reduce noise around a spherical microphone.","title":"Practical Results"},{"location":"results/#practical-results","text":"A large part of the objectives of the FAST project has been achieved. On this page, we attempt to provide an overview of the results obtained.","title":"Practical Results"},{"location":"results/#syfala","text":"One of the major contributions of FAST is the Syfala tool ( https://inria-emeraude.github.io/syfala/ ), which allows for the programming of AMD/Xilinx FPGAs in C/C++ and Faust for real-time audio signal processing applications, based on the high-level synthesis tools provided by AMD/Xilinx. When Faust is used, the distribution of calculations between the FPGA and the system\u2019s CPU is done automatically. Similarly, memory management (e.g., external DDR memory, internal FPGA memory, etc.) is handled by Syfala. In contrast, when C/C++ is used, these tasks are done manually, which is more complex but also allows for more precise control over program optimization. In this context, another significant contribution of FAST is a wide range of optimization techniques specific to real-time audio signal processing, based on HLS. These are thoroughly presented in the Syfala documentation. Unfortunately, we did not have time to port this work to Syfala's \"Faust mode,\" which means that it is currently much less efficient than the manual C/C++ mode. In both cases, programming FPGAs for real-time audio signal processing applications is now much simpler thanks to Syfala. In parallel with this work, a Faust-to-VHDL compiler prototype has been developed. At the moment, it does not offer the same level of performance as the solutions using HLS. In general, a significant amount of pioneering work has been done regarding the management of fixed-point calculations in the Faust compiler. The use of fixed-point arithmetic, both in HLS and VHDL, would increase the performance level of programs produced by Syfala. However, this system is not yet operational.","title":"Syfala"},{"location":"results/#hardware-control","text":"Programs implemented with Syfala can be controlled with a modular hardware interface (see the figure below). This interface can house a wide variety of buttons, rotary or linear potentiometers, etc. The parameters of a Faust or C/C++ program can be easily mapped to physical controllers on this interface, whose use is fully integrated into Syfala.","title":"Hardware Control"},{"location":"results/#software-control-and-embedded-linux-integration","text":"The software part (the one executed on the system's CPU) of a Syfala program can be implemented either as a \"bare metal\" kernel or as a program running on an embedded Linux provided with Syfala. The bare metal solution allows for handling simple use cases. Specifically, the physical interface mentioned in the previous section uses this method. Similarly, when Faust is used, an option allows for generating a graphical interface executable on a PC connected to the FPGA board. Control data is transmitted to the board via its USB serial port and received by the bare metal kernel. The embedded Linux approach offers the possibility of using more advanced control methods or receiving digital audio streams via Ethernet. In terms of control, embedded Linux enables, for example, the use of USB MIDI interfaces (see the Figure below) or the Open Sound Control (OSC) protocol. For receiving and sending audio streams over Ethernet, we implemented our own protocol, which is usable via PipeWire. This feature is very useful in applications related to spatialized sound: Wave Field Synthesis systems, Ambisonics, etc.","title":"Software Control and Embedded Linux Integration"},{"location":"results/#custom-fpga-audio-interfaces","text":"Several audio sister boards for FPGA offering unique features and seamlessly integrating with Syfala have been developed as part of FAST. The simplest of these (see the image on the left in the Figure below) allows for the creation of accessible and inexpensive systems for sound spatialization based on a Digilent Zybo Z7 FPGA board. It integrates 32 amplified DACs and can thus be directly interfaced with small 3W speakers. This board is \"stackable,\" which allows for increasing the number of supported audio channels (up to 256). Its manufacturing cost is under 200 euros. Another, more complex board (see the image on the right in the figure), designed for active acoustic control applications, was also implemented as part of FAST. It enabled us to achieve the lowest digital audio latency ever presented in the academic world, at 10 microseconds with a sampling rate of 768 kHz. It provides access to 32 line-level audio inputs and outputs. Like the board mentioned above, it is stackable, allowing for the expansion of input and output channels up to 512. This board was designed to be directly interfaced with a Digilent Genesys FPGA board.","title":"Custom FPGA Audio Interfaces"},{"location":"results/#spatial-audio-applications","text":"The \"low-cost\" audio interface (see previous section) developed as part of FAST enabled the creation of a 32-channel Wave Field Synthesis (WFS) system (see the Figure below) for a cost of less than 1,000 euros (at least five times cheaper than a system using standard techniques). This system is based on the Digilent Zybo Z7-20 board and allows the spatialization of more than 50 sound sources transmitted to the system via ethernet. Their position can be controlled via OSC messages. The same approach was used to create an accessible Ambisonic system with 17 speakers. The Ambisonic decoder is executed directly on the FPGA, and the encoded audio streams are sent to the system via ethernet.","title":"Spatial Audio Applications"},{"location":"results/#high-order-delta-sigma-dac","text":"Significant work on the implementation of a delta-sigma DAC directly on the FPGA was carried out as part of FAST by Jonas H\u00f6pner (intern at INSA). This aims to reduce the amount of additional hardware (e.g., sound card, etc.) used for real-time audio applications and to enable the execution of audio algorithms at high sampling rates (in the range of several mega Hertz). A functional 5th-order delta-sigma DAC prototype has been integrated into Syfala. This provides performance in terms of signal-to-noise ratio equivalent to a commercial audio DAC and only requires the use of a resistor and a capacitor per audio channel.","title":"High Order Delta-Sigma DAC"},{"location":"results/#active-control","text":"The work carried out during Lo\u00efc Alexandre's PhD allowed the testing of development platforms using Syfala in active control applications. The first major result is the implementation of a feedback active control algorithm for an active noise-cancelling headset application. The controller uses the Zybo-Z7 platform and very low-latency ADAU1787 converters. This demonstrator is now used in a teaching unit called \"Active Noise Control\" at the \u00c9cole Centrale de Lyon. The second major result is the implementation of two multichannel active control algorithms for noise reduction in an extended area of space: an MP-FxLMS (Multipoint \"Filtered reference Least Mean Square\") and an SH-FxLMS (Spherical Harmonics)-FxLMS. These algorithms run in real-time on the Zybo-Z7 platforms and help reduce noise around a spherical microphone.","title":"Active Control"}]}